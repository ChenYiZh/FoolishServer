<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FoolishClient.Framework</name>
    </assembly>
    <members>
        <member name="T:FoolishClient.Action.IClientAction">
            <summary>
            客户端协议类
            </summary>
        </member>
        <member name="T:FoolishClient.Action.ClientAction">
            <summary>
            客户端协议类
            </summary>
        </member>
        <member name="T:FoolishClient.Net.IClientSocket">
            <summary>
            客户端套接字连接管理类
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.Name">
            <summary>
            标识名称
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.Host">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.Port">
            <summary>
            服务器端口
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.IsReady">
            <summary>
            数据是否已经初始化了
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.IsRunning">
            <summary>
            是否已经开始工作
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.Connected">
            <summary>
            是否还连接着
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.HeartbeatInterval">
            <summary>
            心跳包间隔
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.Socket">
            <summary>
            内部套接字
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.MessageOffset">
            <summary>
            消息偏移值
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.Compression">
            <summary>
            压缩工具
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ISocketsss.CryptoProvider">
            <summary>
            加密工具
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ISocketsss.Ready(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            初始化信息
            </summary>
            <param name="name"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="heartbeatInterval"></param>
        </member>
        <member name="M:FoolishClient.Net.ISocketsss.ConnectAsync(System.Action{System.Boolean})">
            <summary>
            连接函数
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ISocketsss.RebuildHeartbeatPackage">
            <summary>
            重新构建心跳包数据
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ISocketsss.SendAsync(FoolishGames.IO.IMessageWriter,FoolishClient.Delegate.SendCallback)">
            <summary>
            数据发送<c>异步</c>
            </summary>
            <param name="data"></param>
            <param name="callback">发送回调</param>
            <returns>判断有没有发送出去</returns>
        </member>
        <member name="M:FoolishClient.Net.ISocketsss.Close">
            <summary>
            关闭函数
            </summary>
        </member>
        <member name="T:FoolishClient.Net.ClientSocket">
            <summary>
            套接字父类
            </summary>
        </member>
        <member name="F:FoolishClient.Net.ClientSocket.address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.Name">
            <summary>
            标识名称
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.Host">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.Port">
            <summary>
            服务器端口
            </summary>
        </member>
        <member name="F:FoolishClient.Net.ClientSocket.readyFlag">
            <summary>
            运行的标识
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.IsReady">
            <summary>
            数据是否已经初始化了
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.HeartbeatInterval">
            <summary>
            心跳间隔
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.HeartbeatTimer">
            <summary>
            心跳包线程
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.SendOrReceiveThread">
            <summary>
            数据处理线程
            </summary>
        </member>
        <member name="F:FoolishClient.Net.ClientSocket.heartbeatBuffer">
            <summary>
            心跳包
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.Category">
            <summary>
            设置类别名称
            </summary>
        </member>
        <member name="F:FoolishClient.Net.ClientSocket.messageOffset">
            <summary>
            消息偏移值
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.MessageOffset">
            <summary>
            消息偏移值
            </summary>
        </member>
        <member name="F:FoolishClient.Net.ClientSocket.compression">
            <summary>
            压缩工具
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.Compression">
            <summary>
            压缩工具
            </summary>
        </member>
        <member name="F:FoolishClient.Net.ClientSocket.cryptoProvider">
            <summary>
            加密工具
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.CryptoProvider">
            <summary>
            加密工具
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.Sender">
            <summary>
            发送的管理类
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.Receiver">
            <summary>
            接收管理类
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.MessageNumber">
            <summary>
            消息Id
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.ActionProvider">
            <summary>
            Action生成类
            </summary>
        </member>
        <member name="P:FoolishClient.Net.ClientSocket.MessageContractor">
            <summary>
            消息处理的中转站
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.Ready(System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            初始化Socket基本信息
            </summary>
            <param name="name"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="actionClassFullName">Action协议类的完整名称</param>
            <param name="heartbeatInterval">心跳间隔</param>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.AutoConnect">
            <summary>
            自动连接
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.ConnectAsync(System.Action{System.Boolean})">
            <summary>
            连接函数[内部异步实现]
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.Connect">
            <summary>
            同步连接
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.Awake">
            <summary>
            初始化执行
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.MakeSocket">
            <summary>
            创建原生套接字
            </summary>
        </member>
        <member name="F:FoolishClient.Net.ClientSocket.waitingFlag">
            <summary>
            等待的线程锁，防止产生多组线程
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.MessageSolved(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            当消息处理完执行
            <para>https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socketasynceventargs</para>
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.CheckSendOrReceive(System.Object)">
            <summary>
            定时处理消息
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.SendHeartbeatPackage(System.Object)">
            <summary>
            发送心跳包
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.RebuildHeartbeatPackage">
            <summary>
            重新构建心跳包数据
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.BuildHeartbeatBuffer">
            <summary>
            创建默认心跳包数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.Close(FoolishGames.Net.EOpCode)">
            <summary>
            关闭函数
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.SetMessageOffset(System.Int32)">
            <summary>
            设置消息的偏移值
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.SetCompression(FoolishGames.IO.ICompression)">
            <summary>
            设置压缩方案
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.SetCryptoProvide(FoolishGames.Security.ICryptoProvider)">
            <summary>
            设置解密方案
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.Send(FoolishGames.IO.IMessageWriter)">
            <summary>
            数据发送<c>异步</c>
            </summary>
            <param name="message">大宋的消息</param>
            <returns>判断有没有发送出去</returns>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.SendImmediately(FoolishGames.IO.IMessageWriter)">
            <summary>
            立即发送消息，会打乱消息顺序。只有类似心跳包这种及时的需要用到。一般使用Send就满足使用
            </summary>
            <param name="message">发送的消息</param>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.SendBytes(System.Byte[])">
            <summary>
            内部函数，直接传bytes，会影响数据解析
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.SendBytesImmediately(System.Byte[])">
            <summary>
            内部函数，直接传bytes，会影响数据解析，以及解析顺序
            </summary>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.OnMessageReceived(FoolishGames.Net.IMessageEventArgs{FoolishClient.Net.IClientSocket})">
            <summary>
            消息处理
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FoolishClient.Net.ClientSocket.ProcessMessage(FoolishGames.IO.IMessageReader)">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="T:FoolishClient.Net.TcpSocket">
            <summary>
            Tcp连接池
            </summary>
        </member>
        <member name="M:FoolishClient.Net.TcpSocket.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:FoolishClient.Net.TcpSocket.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:FoolishClient.Net.TcpSocket.MakeSocket">
            <summary>
            建立原生套接字
            </summary>
            <returns></returns>
        </member>
        <member name="T:FoolishClient.Proxy.IClientActionDispatcher">
            <summary>
            Action工厂
            </summary>
        </member>
        <member name="M:FoolishClient.Proxy.IClientActionDispatcher.Provide(System.Int32)">
            <summary>
            获取Action
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="T:FoolishClient.Proxy.ClientActionDispatcher">
            <summary>
            客户端Action协议生成类
            </summary>
        </member>
        <member name="P:FoolishClient.Proxy.ClientActionDispatcher.ActionNameFormat">
            <summary>
            Action名称的格式
            </summary>
        </member>
        <member name="M:FoolishClient.Proxy.ClientActionDispatcher.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="actionNameFormat">Action名称的格式</param>
        </member>
        <member name="M:FoolishClient.Proxy.ClientActionDispatcher.Provide(System.Int32)">
            <summary>
            生成Action协议
            </summary>
        </member>
        <member name="T:FoolishClient.Proxy.MessageWorker">
            <summary>
            消息处理的代理
            </summary>
        </member>
        <member name="P:FoolishClient.Proxy.MessageWorker.Message">
            <summary>
            消息处理窗口
            </summary>
        </member>
        <member name="P:FoolishClient.Proxy.MessageWorker.Socket">
            <summary>
            服务器
            </summary>
        </member>
        <member name="M:FoolishClient.Proxy.MessageWorker.Work">
            <summary>
            需要处理的工作
            </summary>
        </member>
        <member name="T:FoolishClient.Delegate.SendCallback">
            <summary>
            数据发送的回调
            </summary>
            <param name="success">操作是否成功，不包含结果</param>
            <param name="result"></param>
        </member>
        <member name="T:FoolishClient.Log.Categories">
            <summary>
            类别名称
            </summary>
        </member>
        <member name="T:FoolishClient.RPC.Network">
            <summary>
            网络处理类
            </summary>
        </member>
        <member name="P:FoolishClient.RPC.Network.DefaultUsableSocketName">
            <summary>
            默认使用的套接字名称
            </summary>
        </member>
        <member name="F:FoolishClient.RPC.Network.Sockets">
            <summary>
            客户端套接字列表
            </summary>
        </member>
        <member name="M:FoolishClient.RPC.Network.MakeTcpSocket(System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            创建套接字
            </summary>
            <param name="name"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="actionClassFullName">Action协议类的完整名称</param>
            <param name="heartbeatInterval">心跳间隔</param>
        </member>
        <member name="M:FoolishClient.RPC.Network.MakeSocket(System.String,FoolishClient.Net.IClientSocket)">
            <summary>
            创建套接字
            </summary>
        </member>
        <member name="M:FoolishClient.RPC.Network.GetSocket(System.String)">
            <summary>
            获取指定的Socket
            </summary>
        </member>
        <member name="M:FoolishClient.RPC.Network.Send(System.Int32,FoolishGames.IO.IMessageWriter)">
            <summary>
            使用默认套接字来发送消息
            <para>通过DefaultUsableSocketName来配置默认的套接字名称</para>
            </summary>
        </member>
        <member name="M:FoolishClient.RPC.Network.Send(System.String,System.Int32,FoolishGames.IO.IMessageWriter)">
            <summary>
            使用默认套接字来发送消息
            <para>通过DefaultUsableSocketName来配置默认的套接字名称</para>
            </summary>
        </member>
    </members>
</doc>
