<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FoolishServer.Common</name>
    </assembly>
    <members>
        <member name="T:FoolishServer.Config.IDatabaseSetting">
            <summary>
            数据库设置
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IDatabaseSetting.ConnectKey">
            <summary>
            数据库映射名称
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IDatabaseSetting.ProviderName">
            <summary>
            数据库连接名称
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IDatabaseSetting.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IDatabaseSetting.Database">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IDatabaseSetting.Kind">
            <summary>
            是什么类型的数据库
            </summary>
        </member>
        <member name="T:FoolishServer.Config.IRedisSetting">
            <summary>
            Redis设置信息
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IRedisSetting.Host">
            <summary>
            Redis链接地址
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IRedisSetting.Port">
            <summary>
            Redis端口
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IRedisSetting.Password">
            <summary>
            连接密码
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IRedisSetting.DbIndex">
            <summary>
            DbIndex
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IRedisSetting.Timeout">
            <summary>
            连接Timeout
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IRedisSetting.IsValid">
            <summary>
            数据是否有效
            </summary>
        </member>
        <member name="M:FoolishServer.Config.Configeration.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:FoolishServer.Config.DatabaseSetting">
            <summary>
            数据库设置
            </summary>
        </member>
        <member name="P:FoolishServer.Config.DatabaseSetting.ConnectKey">
            <summary>
            数据库映射名称
            </summary>
        </member>
        <member name="P:FoolishServer.Config.DatabaseSetting.ProviderName">
            <summary>
            数据库连接名称
            </summary>
        </member>
        <member name="P:FoolishServer.Config.DatabaseSetting.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:FoolishServer.Config.DatabaseSetting.Kind">
            <summary>
            是什么类型的数据库
            </summary>
        </member>
        <member name="P:FoolishServer.Config.DatabaseSetting.Database">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="M:FoolishServer.Config.DatabaseSetting.#ctor(System.Xml.XmlNode)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.Name">
            <summary>
            服务器标识
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.MainClass">
            <summary>
            执行类
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.ClassFullname">
            <summary>
            自定义脚本的完整名称，可以不设置，使用原生的管理类
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.ActionClassFullName">
            <summary>
            消息处理的完整类名，用{0}嵌入id
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.Backlog">
            <summary>
            TCP全连接队列长度
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.MaxConnections">
            <summary>
            最大并发数量
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.MaxAcceptCapacity">
            <summary>
            默认连接对象池容量
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.MaxIOCapacity">
            <summary>
            默认消息处理连接池容量大小
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.BufferSize">
            <summary>
            数据通讯缓存字节大小
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.Offset">
            <summary>
            通讯内容整体偏移
            </summary>
        </member>
        <member name="P:FoolishServer.Config.HostServerSetting.UseGZip">
            <summary>
            是否使用压缩
            </summary>
        </member>
        <member name="M:FoolishServer.Config.HostServerSetting.GetCategory">
            <summary>
            获取类别显示
            </summary>
        </member>
        <member name="M:FoolishServer.Config.HostServerSetting.IsValid">
            <summary>
            判断是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="T:FoolishServer.Config.RedisSetting">
            <summary>
            Redis设置信息
            </summary>
        </member>
        <member name="P:FoolishServer.Config.RedisSetting.Host">
            <summary>
            Redis链接地址
            </summary>
        </member>
        <member name="P:FoolishServer.Config.RedisSetting.Port">
            <summary>
            Redis端口
            </summary>
        </member>
        <member name="P:FoolishServer.Config.RedisSetting.Password">
            <summary>
            连接密码
            </summary>
        </member>
        <member name="P:FoolishServer.Config.RedisSetting.DbIndex">
            <summary>
            DbIndex
            </summary>
        </member>
        <member name="P:FoolishServer.Config.RedisSetting.Timeout">
            <summary>
            连接Timeout
            </summary>
        </member>
        <member name="P:FoolishServer.Config.RedisSetting.IsValid">
            <summary>
            数据是否有效
            </summary>
        </member>
        <member name="T:FoolishServer.Config.Settings">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.ServerID">
            <summary>
            服务器ID
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.MajorVersion">
            <summary>
            主版本号
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.MinorVersion">
            <summary>
            副版本号
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.RevisionInfo">
            <summary>
            修复版本号
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.BuildInfo">
            <summary>
            构建版本号
            </summary>
        </member>
        <member name="M:FoolishServer.Config.Settings.GetVersion">
            <summary>
            获取版本
            </summary>
            <returns></returns>
        </member>
        <member name="P:FoolishServer.Config.Settings.CSScriptsPath">
            <summary>
            脚本存放目录
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.AssemblyName">
            <summary>
            编译后的程序集名称
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.MainClass">
            <summary>
            服务器启动运行时,需要实现FoolishServer.Runtime.CustomRuntime
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.IsDebug">
            <summary>
            是否是Debug模式
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.IsRelease">
            <summary>
            是否是发布模式
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.HostSettings">
            <summary>
            服务器配置队列
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.RedisSetting">
            <summary>
            Redis的配置信息
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.DatabaseSettings">
            <summary>
            数据库连接信息
            </summary>
        </member>
        <member name="F:FoolishServer.Config.Settings.SPLITE_KEY">
            <summary>
            Redis Key 分隔符
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.DataReleasePeriod">
            <summary>
            当数据(LoadAll)从db中全部拉取进来后，过多久释放
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.DataCommitInterval">
            <summary>
            每隔多少时间检测修改的数据并提交
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.LockerTimeout">
            <summary>
            线程锁的Timeout
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.UseColdEntities">
            <summary>
            是否检查热数据并推到冷数据
            </summary>
        </member>
        <member name="P:FoolishServer.Config.Settings.ColdEntitiesCheckoutInterval">
            <summary>
            热数据检查周期
            </summary>
        </member>
        <member name="M:FoolishServer.Config.Settings.LoadFromFile">
            <summary>
            读取配置
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.IEntityField">
            <summary>
            列信息
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityField.IsKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityField.Name">
            <summary>
            在数据库中列名
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityField.Nullable">
            <summary>
            是否可为空
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityField.IsIndex">
            <summary>
            是否建立索引，只在主表下有用
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityField.DefaultValue">
            <summary>
            默认补全值
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityField.FieldType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.IEntityKey">
            <summary>
            Entity的Key，害怕多主键的问题
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityKey.Keys">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityKey.KeyName">
            <summary>
            完整Key名称，用于判断
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.IEntitySet`1">
            <summary>
            数据对象池，
            默认只加载缓存中的数据。
            如果需要针对完整数据进行遍历，先执行LoadAll
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FoolishServer.Data.Entity.IEntitySet`1.Find(System.Object[])">
            <summary>
            主键查找，如果缓存中找不到，会从数据库中查询
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.IEntitySet`1.Find(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            主键类查询
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.IEntitySet`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            根据Lamda返回新的列表，不会影响内部数据列表
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.IEntitySet`1.AddOrUpdate(`0)">
            <summary>
            添加数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.IEntitySet`1.Remove(`0)">
            <summary>
            删除数据，同时删除缓存，Redis，数据库中的数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.IEntitySet`1.Remove(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            通过Key删除数据，同时删除缓存，Redis，数据库中的数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.IEntitySet`1.LoadAll">
            <summary>
            加载完整的数据，从数据库中加载并附加到缓存中
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.IEntityTable">
            <summary>
            表信息
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityTable.ConnectKey">
            <summary>
            映射的数据库链接名称
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityTable.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityTable.TableNameFormat">
            <summary>
            表名的格式
            {0}为数据库名称，{1:MMdd}为之间名称
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityTable.InCache">
            <summary>
            是否进入缓存，默认true，但是日志这些结构，需要设置为false
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityTable.NeverExpired">
            <summary>
            是否从不过期,判断是否产生冷数据，默认false
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.IEntityTable.StorageType">
            <summary>
            存储方案(位运算)
            <para>默认 StorageType.WriteToRedis | EStorageType.ReadFromRedis | EStorageType.WriteToDb | EStorageType.ReadFromDb</para>
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.ETableFieldType">
            <summary>
            数据库中字段类型
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Auto">
            <summary>
            默认参数，自动匹配
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.String">
            <summary>
            TINYTEXT/varchar(255)
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Text">
            <summary>
            TEXT/varchar(65,535)
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.LongText">
            <summary>
            数据库中最大可存入的数据长度
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Blob">
            <summary>
            二进制数据：65,535 字节的数据/varbinary
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.LongBlob">
            <summary>
            二进制数据：LongBlob/varbinary(max)
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Bit">
            <summary>
            bit: 字节0/1
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Byte">
            <summary>
            TINYINT
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Short">
            <summary>
            SMALLINT
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Int">
            <summary>
            INT
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Long">
            <summary>
            BIGINT
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.SByte">
            <summary>
            TINYINT unsigned/SMALLINT
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.UShort">
            <summary>
            SMALLINT unsigned/SMALLINT
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.UInt">
            <summary>
            INT  unsigned/INT
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.ULong">
            <summary>
            BIGINT unsigned/BIGINT
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Float">
            <summary>
            FLOAT/float(24)
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Double">
            <summary>
            DOUBLE/float(53)
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.DateTime">
            <summary>
            DATETIME
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.ETableFieldType.Error">
            <summary>
            错误类型，无法解析，也无法保存
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.EntityFieldAttribute">
            <summary>
            属性字段
            String类型默认varchar(255),列表默认LongText
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityFieldAttribute.IsKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityFieldAttribute.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityFieldAttribute.Nullable">
            <summary>
            是否可为空
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityFieldAttribute.IsIndex">
            <summary>
            是否建立索引，只在主表下有用
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityFieldAttribute.DefaultValue">
            <summary>
            默认补全值
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityFieldAttribute.FieldType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.EntityKey">
            <summary>
            主键管理类，主要用于Redis
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EntityKey.type">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityKey.Type">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EntityKey.tableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityKey.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EntityKey.keys">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityKey.Keys">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EntityKey.keyName">
            <summary>
            完整Key名称，用于判断
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityKey.KeyName">
            <summary>
            完整Key名称，用于判断
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EntityKey.fullName">
            <summary>
            全名
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.#ctor(System.Object[])">
            <summary>
            通过主键生成对象
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.#ctor(System.Type,System.Object[])">
            <summary>
            通过主键生成对象
            </summary>
            <param name="keys"></param>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityKey.IsSingleKey">
            <summary>
            是否是主键，在作为字典Key时用来提升性能
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.CheckIsSingleKey">
            <summary>
            判断是否是主键，在作为字典Key时用来提升性能
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.RefreshKeyName">
            <summary>
            重新刷新KeyName
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.MakeKeyName">
            <summary>
            生成Redis遍历主键
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.MakeKeyName(System.Object[])">
            <summary>
            生成Entity的KeyName
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.MakeTableName(System.Type)">
            <summary>
            生成Entity的Table名称
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.MakeFullName(System.Type,System.Object[])">
            <summary>
            生成完整名称
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.op_Equality(FoolishServer.Data.Entity.EntityKey,FoolishServer.Data.Entity.EntityKey)">
            <summary>
            重写相等运算符
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.op_Inequality(FoolishServer.Data.Entity.EntityKey,FoolishServer.Data.Entity.EntityKey)">
            <summary>
            重写不等运算符
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.Equals(System.Object)">
            <summary>
            重写相等运算符
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.GetHashCode">
            <summary>
            HashCode是否要重写？
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.ToString">
            <summary>
            重写ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntityKey.op_Implicit(FoolishServer.Data.Entity.EntityKey)~System.String">
            <summary>
            隐式转换成字符串
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:FoolishServer.Data.Entity.EntitySet`1">
            <summary>
            数据对象集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:FoolishServer.Data.Entity.EntitySet`1.DbSet">
            <summary>
            全局管理的数据对象池
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntitySet`1.EntityType">
            <summary>
            泛型的类
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EntitySet`1.FullData">
            <summary>
            全数据
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntitySet`1.Dictionary">
            <summary>
            这个类的缓存数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.#ctor(FoolishServer.Data.IDbSet{`0})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.Finalize">
            <summary>
            析构时注销
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.Find(System.Object[])">
            <summary>
            主键查找，如果缓存中找不到，会从数据库中查询
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.Find(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            主键类查询
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            根据Lamda返回新的列表，不会影响内部数据列表
            <para>如果要遍历所有，需要预先使用LoadAll</para>
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.AddOrUpdate(`0)">
            <summary>
            添加或保存
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.Remove(`0)">
            <summary>
            删除实例
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.Remove(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            通过Key删除
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.GetEnumerator">
            <summary>
            迭代器
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.LoadAll">
            <summary>
            拉取所有数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.EntitySet`1.OnDbSetDataModified(FoolishServer.Data.Entity.EntityKey,`0)">
            <summary>
            监听DbSet的数据变化
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.EStorageType">
            <summary>
            存储类型
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EStorageType.WriteToRawDb">
            <summary>
            往RawDb写
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EStorageType.ReadFromRawDb">
            <summary>
            从RawDb读
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EStorageType.WriteToDb">
            <summary>
            往Db写
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EStorageType.ReadFromDb">
            <summary>
            从Db读
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.EntityTableAttribute">
            <summary>
            实体表映射属性
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityTableAttribute.ConnectKey">
            <summary>
            数据库映射名称
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityTableAttribute.TableName">
            <summary>
            数据表名
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityTableAttribute.TableNameFormat">
            <summary>
            {0}为数据库名称，{1:MMdd}为之间名称
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityTableAttribute.InCache">
            <summary>
            是否进入缓存，默认true，但是日志这些结构，需要设置为false
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityTableAttribute.NeverExpired">
            <summary>
            是否从不过期,判断是否产生冷数据，默认false
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.EntityTableAttribute.StorageType">
            <summary>
            存储方案(位运算)
            <para>默认 StorageType.WriteToRedis | EStorageType.ReadFromRedis | EStorageType.WriteToDb | EStorageType.ReadFromDb</para>
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.EStorageState">
            <summary>
            当前实例的存储状态
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EStorageState.New">
            <summary>
            刚创建的
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EStorageState.Stored">
            <summary>
            已经在堆栈中
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EStorageState.Removed">
            <summary>
            移除了
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.MajorEntity">
            <summary>
            基于表的类区别于Minor
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.MajorEntity.state">
            <summary>
            当前实例的存储状态
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.MajorEntity.State">
            <summary>
            当前实例的存储状态
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.SetState(FoolishServer.Data.Entity.EStorageState)">
            <summary>
            当前实例的存储状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:FoolishServer.Data.Entity.MajorEntity.TableScheme">
            <summary>
            表名
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.MajorEntity.oldEntityKey">
            <summary>
            EntityKey被修改前的数据
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.MajorEntity.entityKey">
            <summary>
            Redis主键名称
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Entity.MajorEntity.IsExpired">
            <summary>
            判断数据是否长时间没有修改
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:FoolishServer.Data.Entity.MajorEntity.OnPropertyModified">
            <summary>
            当属性发生变化时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.OnNotifyPropertyModified(System.String,System.Object,System.Object)">
            <summary>
            属性调用的实现函数
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.UpdateEntityKey(FoolishServer.Data.ITableFieldScheme,System.Object)">
            <summary>
            更新存入Redis的Key
            </summary>
            <param name="tableField"></param>
            <param name="value"></param>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.NotifyModified(FoolishServer.Data.Entity.EModifyType,System.String)">
            <summary>
            数据中心提交更新
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.GetEntityKey">
            <summary>
            主键
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.GetOldEntityKey">
            <summary>
            EntityKey被修改前的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.KeyIsModified">
            <summary>
            判断主键是否发生了变化
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.ResetModifiedType">
            <summary>
            重置时，把Key也重置
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.RefreshEntityKey">
            <summary>
            刷新Key
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.MajorEntity.OnPulledFromDb">
            <summary>
            数据数据库中拉取下来
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.MinorEntity">
            <summary>
            用于属性的结构类
            </summary>
        </member>
        <member name="E:FoolishServer.Data.Entity.MinorEntity.OnPropertyModified">
            <summary>
            当属性发生变化时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Entity.MinorEntity.OnNotifyPropertyModified(System.String,System.Object,System.Object)">
            <summary>
            属性调用的实现函数
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Entity.EModifyType">
            <summary>
            修改属性的操作类型
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EModifyType.UnModified">
            <summary>
            未修改
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EModifyType.Add">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EModifyType.Modify">
            <summary>
            修改
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Entity.EModifyType.Remove">
            <summary>
            移除
            </summary>
        </member>
        <member name="T:FoolishServer.Data.IDatabase">
            <summary>
            数据连接的基本类
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IDatabase.Kind">
            <summary>
            是什么类型的数据库
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IDatabase.Connected">
            <summary>
            是否还连接着
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDatabase.Connect">
            <summary>
            建立连接
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDatabase.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDatabase.CommitModifiedEntitys(System.Collections.Generic.IEnumerable{FoolishServer.Data.DbCommition})">
            <summary>
            操作一堆数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDatabase.LoadAll``1">
            <summary>
            读取表中所有数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDatabase.Find``1(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            通过EntityKey，查询某一条数据，没有就返回空
            </summary>
        </member>
        <member name="T:FoolishServer.Data.IDbSet">
            <summary>
            缓存中的数据结构
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IDbSet.TableScheme">
            <summary>
            表结构配置
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IDbSet.SyncRoot">
            <summary>
            用于锁的对象
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IDbSet.ReleaseCountdown">
            <summary>
            卸载冷数据倒计时
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IDbSet.CommitCountdown">
            <summary>
            推送倒计时
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDbSet.ReleaseColdEntities">
            <summary>
            卸载冷数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDbSet.CommitModifiedData">
            <summary>
            将修改过的数据进行提交
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDbSet.ForceCommitAllModifiedData">
            <summary>
            将所有修改过的数据进行提交
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDbSet.OnModified(FoolishServer.Data.Entity.EntityKey,FoolishServer.Data.Entity.MajorEntity)">
            <summary>
            非泛型修改数据通知，内部强制转换
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDbSet.PullAllRawData">
            <summary>
            重新拉取热数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDbSet.PushAllRawData">
            <summary>
            将所有的缓存的热数据全部推送出去
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDbSet.CheckOutColdEntities">
            <summary>
            移出冷数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDbSet.Release">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:FoolishServer.Data.IDbSet`1">
            <summary>
            缓存中的数据结构
            </summary>
        </member>
        <member name="E:FoolishServer.Data.IDbSet`1.OnDataModified">
            <summary>
            数据变化监听
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IDbSet`1.RawEntities">
            <summary>
            缓存中的数据，热数据
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IDbSet`1.ModifiedEntitiesPoolIndex">
            <summary>
            现在真在使用的修改缓存池id
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IDbSet`1.ModifiedEntitiesPool">
            <summary>
            已经改动过的实例，这些数据应该会出现在热数据中，主要用于推送。
            防止多线程阻塞，所以使用集合池
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IDbSet`1.ColdEntities">
            <summary>
            冷数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDbSet`1.OnModified(FoolishServer.Data.Entity.EntityKey,`0)">
            <summary>
            修改数据通知
            </summary>
        </member>
        <member name="M:FoolishServer.Data.IDbSet`1.LoadAll">
            <summary>
            推入所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Data.IDbSet`1.Find(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            冷热数据库查询
            </summary>
        </member>
        <member name="T:FoolishServer.Data.IEntityConverter">
            <summary>
            数据存储和读取时使用，使用抽象类EntityConverter进行修改
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IEntityConverter.Type">
            <summary>
            转换的数据类型
            </summary>
        </member>
        <member name="T:FoolishServer.Data.IRawDatabase">
            <summary>
            热数据，数据库结构
            </summary>
        </member>
        <member name="P:FoolishServer.Data.IRawDatabase.Converter">
            <summary>
            解析方案，默认Protobuff
            </summary>
        </member>
        <member name="T:FoolishServer.Data.ISQLDatabase">
            <summary>
            SQL标准数据库
            </summary>
        </member>
        <member name="M:FoolishServer.Data.ISQLDatabase.SetSettings(FoolishServer.Config.IDatabaseSetting)">
            <summary>
            设置配置文件，初始化时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Data.ISQLDatabase.GenerateOrUpdateTableScheme(FoolishServer.Data.ITableScheme)">
            <summary>
            对表结构进行调整或创建
            </summary>
        </member>
        <member name="T:FoolishServer.Data.ITableFieldScheme">
            <summary>
            列数据
            </summary>
        </member>
        <member name="P:FoolishServer.Data.ITableFieldScheme.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:FoolishServer.Data.ITableFieldScheme.Attribute">
            <summary>
            Attribute信息
            </summary>
        </member>
        <member name="P:FoolishServer.Data.ITableFieldScheme.Type">
            <summary>
            列类型
            </summary>
        </member>
        <member name="T:FoolishServer.Data.ITableScheme">
            <summary>
            表结构
            </summary>
        </member>
        <member name="P:FoolishServer.Data.ITableScheme.EntityTable">
            <summary>
            Attribute信息
            </summary>
        </member>
        <member name="P:FoolishServer.Data.ITableScheme.Type">
            <summary>
            结构类型
            </summary>
        </member>
        <member name="P:FoolishServer.Data.ITableScheme.FieldsByProperty">
            <summary>
            列信息，Key: PropertyName
            </summary>
        </member>
        <member name="P:FoolishServer.Data.ITableScheme.FieldsByName">
            <summary>
            列信息，Key: Name
            </summary>
        </member>
        <member name="M:FoolishServer.Data.ITableScheme.GetTableName">
            <summary>
            用于存数据库的表名
            </summary>
        </member>
        <member name="T:FoolishServer.Data.EDatabase">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:FoolishServer.Data.EDatabase.Unknow">
            <summary>
            不在识别范围的数据库
            </summary>
        </member>
        <member name="F:FoolishServer.Data.EDatabase.MySQL">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="F:FoolishServer.Data.EDatabase.SQLServer">
            <summary>
            SQLServer
            </summary>
        </member>
        <member name="F:FoolishServer.Data.EDatabase.Redis">
            <summary>
            Redis
            </summary>
        </member>
        <member name="T:FoolishServer.Data.Database">
            <summary>
            数据库操作
            </summary>
        </member>
        <member name="F:FoolishServer.Data.Database.LOG_LEVEL">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Database.Kind">
            <summary>
            是什么类型的数据库
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Database.Setting">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="P:FoolishServer.Data.Database.Connected">
            <summary>
            判断连接状态
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Database.SetSettings(FoolishServer.Config.IDatabaseSetting)">
            <summary>
            设置配置文件，初始化时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Database.GenerateOrUpdateTableScheme(FoolishServer.Data.ITableScheme)">
            <summary>
            对表结构进行调整或创建
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Database.Close">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Database.Connect">
            <summary>
            开始连接
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Database.CommitModifiedEntitys(System.Collections.Generic.IEnumerable{FoolishServer.Data.DbCommition})">
            <summary>
            操作一堆数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Database.LoadAll``1">
            <summary>
            读取表中所有数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Database.Find``1(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            通过EntityKey，查询某一条数据，没有就返回空
            </summary>
        </member>
        <member name="M:FoolishServer.Data.Database.Make(FoolishServer.Config.IDatabaseSetting)">
            <summary>
            创建数据库连接
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="T:FoolishServer.Data.DataContext">
            <summary>
            数据读取
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DataContext.RawDatabase">
            <summary>
            Redis管理类
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DataContext.Databases">
            <summary>
            连接着的数据库
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DataContext.tableSchemes">
            <summary>
            表结构
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DataContext.TableSchemes">
            <summary>
            表结构映射
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DataContext.entityPool">
            <summary>
            缓存中的数据
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DataContext.EntityPool">
            <summary>
            缓存中的数据
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DataContext.TIMER_INTERVAL">
            <summary>
            计时器间隔设为100ms
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DataContext.Timer">
            <summary>
            计时器
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DataContext.GetEntity``1">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DataContext.GetTableScheme(System.Type)">
            <summary>
            获取表名
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DataContext.GetTableScheme``1">
            <summary>
            获取表名
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DataContext.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DataContext.CheckTableSchemes">
            <summary>
            检查数据库结构是否变更
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DataContext.Start">
            <summary>
            开始读取数据
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DataContext.DbSetType">
            <summary>
            反射用的
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DataContext.InitializeDataContainer(System.Type)">
            <summary>
            初始化数据容器
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:FoolishServer.Data.DataContext.Tick(System.Object)">
            <summary>
            计时器事件
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DataContext.Shutdown">
            <summary>
            退出时调用
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DataContext.PushAllRawData">
            <summary>
            将缓存的数据全部提交
            </summary>
        </member>
        <member name="T:FoolishServer.Data.DbCommition">
            <summary>
            数据推送构造体
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbCommition.Key">
            <summary>
            数据Key
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbCommition.ModifyType">
            <summary>
            推送行为
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbCommition.Entity">
            <summary>
            推送的实例
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbCommition.#ctor(FoolishServer.Data.Entity.EntityKey,FoolishServer.Data.Entity.EModifyType,FoolishServer.Data.Entity.MajorEntity)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:FoolishServer.Data.OnDbSetDataModified`1">
            <summary>
            当DbSet中的数据发生变化时调用
            </summary>
        </member>
        <member name="T:FoolishServer.Data.DbSet`1">
            <summary>
            缓存中的数据结构
            </summary>
        </member>
        <member name="E:FoolishServer.Data.DbSet`1.OnDataModified">
            <summary>
            数据变化监听
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbSet`1.TableScheme">
            <summary>
            表结构配置
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DbSet`1.rawEntities">
            <summary>
            缓存中的数据，热数据
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbSet`1.RawEntities">
            <summary>
            缓存中的数据，热数据
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DbSet`1.modifiedEntitiesPoolIndex">
            <summary>
            现在真在使用的修改缓存池id
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DbSet`1.modifiedEntitiesPoolLocker">
            <summary>
            修改池的锁
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DbSet`1.modifiedEntitiesPool">
            <summary>
            已经改动过的实例，这些数据应该会出现在热数据中，主要用于推送。
            防止多线程阻塞，所以使用集合池
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbSet`1.ModifiedEntitiesPoolIndex">
            <summary>
            现在真在使用的修改缓存池id
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbSet`1.ModifiedEntitiesPool">
            <summary>
            已经改动过的实例，这些数据应该会出现在热数据中，主要用于推送。
            防止多线程阻塞，所以使用集合池
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DbSet`1.coldEntities">
            <summary>
            冷数据
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbSet`1.ColdEntities">
            <summary>
            冷数据
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DbSet`1.releaseCountdown">
            <summary>
            原子锁
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbSet`1.ReleaseCountdown">
            <summary>
            卸载冷数据倒计时
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbSet`1.CommitCountdown">
            <summary>
            推送倒计时
            </summary>
        </member>
        <member name="P:FoolishServer.Data.DbSet`1.SyncRoot">
            <summary>
            用于锁的对象
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DbSet`1.commitFlag">
            <summary>
            提交判断标示
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.OnModified(FoolishServer.Data.Entity.EntityKey,FoolishServer.Data.Entity.MajorEntity)">
            <summary>
            非泛型修改数据通知，内部强制转换
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.OnModified(FoolishServer.Data.Entity.EntityKey,`0)">
            <summary>
            当数据修改时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.Find(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            冷热数据库查询
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.Remove(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            需要从两个列表中删除
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.Modify(`0)">
            <summary>
            修改集合
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.ReleaseColdEntities">
            <summary>
            卸载冷数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.CommitModifiedData">
            <summary>
            将所有修改过的数据进行提交
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.OnCommitModifiedData(System.Object)">
            <summary>
            提交操作
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.ForceCommitAllModifiedData">
            <summary>
            提交所有修改
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.ForceCommitModifiedData(System.Collections.Generic.IDictionary{FoolishServer.Data.Entity.EntityKey,`0})">
            <summary>
            强制提交修改
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.PullAllRawData">
            <summary>
            拉取所有热数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.PushAllRawData">
            <summary>
            将所有的缓存的热数据全部推送出去
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.CommitModifiedEntitys(System.Collections.Generic.IDictionary{FoolishServer.Data.Entity.EntityKey,`0},System.Action)">
            <summary>
            推送集合中的数据
            </summary>
        </member>
        <member name="F:FoolishServer.Data.DbSet`1.loadingAllFlag">
            <summary>
            执行读取全部数据的函数锁
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.LoadAll">
            <summary>
            读取全部数据，只要有一个查询其他全部等待，只为了合批只做一次查询
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.Release">
            <summary>
            执行释放
            </summary>
        </member>
        <member name="M:FoolishServer.Data.DbSet`1.CheckOutColdEntities">
            <summary>
            移出冷数据
            </summary>
        </member>
        <member name="T:FoolishServer.Data.EConvertType">
            <summary>
            转换的数据类型
            </summary>
        </member>
        <member name="F:FoolishServer.Data.EConvertType.InValid">
            <summary>
            无效，抛出异常
            </summary>
        </member>
        <member name="F:FoolishServer.Data.EConvertType.String">
            <summary>
            string
            </summary>
        </member>
        <member name="F:FoolishServer.Data.EConvertType.Binary">
            <summary>
            byte[]
            </summary>
        </member>
        <member name="T:FoolishServer.Data.EntityConverter`1">
            <summary>
            数据存储和读取时使用，基类,暂时只支持string和byte[]
            </summary>
        </member>
        <member name="P:FoolishServer.Data.EntityConverter`1.Type">
            <summary>
            转换的数据类型
            </summary>
        </member>
        <member name="M:FoolishServer.Data.EntityConverter`1.Deserialize``1(`0)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:FoolishServer.Data.EntityConverter`1.Serialize(FoolishServer.Data.Entity.MajorEntity)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:FoolishServer.Data.EntityJsonConverter">
            <summary>
            通过json解析
            </summary>
        </member>
        <member name="T:FoolishServer.Data.EntityProtobufConverter">
            <summary>
            通过Protobuf解析
            </summary>
        </member>
        <member name="T:FoolishServer.Data.MySQLDatabase">
            <summary>
            mysql连接管理
            set global max_allowed_packet = 1073741824;
            </summary>
        </member>
        <member name="F:FoolishServer.Data.MySQLDatabase.CommitionPool">
            <summary>
            事务队列
            </summary>
        </member>
        <member name="F:FoolishServer.Data.MySQLDatabase.writeConnection">
            <summary>
            读写连接
            </summary>
        </member>
        <member name="F:FoolishServer.Data.MySQLDatabase.readConnection">
            <summary>
            读写连接
            </summary>
        </member>
        <member name="F:FoolishServer.Data.MySQLDatabase.isExecuting">
            <summary>
            是否正在事务处理
            </summary>
        </member>
        <member name="F:FoolishServer.Data.MySQLDatabase.isClosed">
            <summary>
            准备关闭
            </summary>
        </member>
        <member name="P:FoolishServer.Data.MySQLDatabase.Connected">
            <summary>
            判断连接状态
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.CreateConnection">
            <summary>
            创建连接，多并发事务处理使用
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.GetWriteConnection">
            <summary>
            判断状态并且获取写入的连接对象
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.GetReadConnection">
            <summary>
            判断状态并且获取读取的连接对象
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.Close(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.SetSettings(FoolishServer.Config.IDatabaseSetting)">
            <summary>
            设置配置文件，初始化时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.PushingCommitions(FoolishGames.Collections.IReadOnlyQueue{FoolishServer.Data.DbCommition})">
            <summary>
            业务处理线程
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.Close">
            <summary>
            关闭时执行
            </summary>
        </member>
        <member name="T:FoolishServer.Data.MySQLDatabase.FieldInfo">
            <summary>
            解析数据库属性字段
            </summary>
        </member>
        <member name="P:FoolishServer.Data.MySQLDatabase.FieldInfo.IsKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="P:FoolishServer.Data.MySQLDatabase.FieldInfo.Name">
            <summary>
            在数据库中列名
            </summary>
        </member>
        <member name="P:FoolishServer.Data.MySQLDatabase.FieldInfo.Nullable">
            <summary>
            是否可为空
            </summary>
        </member>
        <member name="P:FoolishServer.Data.MySQLDatabase.FieldInfo.IsIndex">
            <summary>
            是否建立索引，只在主表下有用
            </summary>
        </member>
        <member name="P:FoolishServer.Data.MySQLDatabase.FieldInfo.DefaultValue">
            <summary>
            默认补全值
            </summary>
        </member>
        <member name="P:FoolishServer.Data.MySQLDatabase.FieldInfo.DbFieldType">
            <summary>
            数据库中的类型
            </summary>
        </member>
        <member name="P:FoolishServer.Data.MySQLDatabase.FieldInfo.FieldType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:FoolishServer.Data.MySQLDatabase.INFORMATION_SCHEMA">
            <summary>
            MySQL管理表的数据库
            </summary>
        </member>
        <member name="F:FoolishServer.Data.MySQLDatabase.ColumnReadInfo">
            <summary>
            需要读取的列表信息
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.GenerateOrUpdateTableScheme(FoolishServer.Data.ITableScheme)">
            <summary>
            对表结构进行调整或创建
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.CheckTableNameChanged(FoolishServer.Data.ITableScheme)">
            <summary>
            判断表名是否发生变化，有变化就生成新的表
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.Query``2(System.String,System.Func{MySql.Data.MySqlClient.MySqlDataReader,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            通过MySqlDataReader解析数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.Query(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            只执行SQL
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.ConvertFromString(System.String)">
            <summary>
            从数据库读取的字符串转类型
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.ConvertToString(FoolishServer.Data.ITableFieldScheme,FoolishServer.Data.Entity.ETableFieldType)">
            <summary>
            从数据库读取的字符串转类型
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.CommitModifiedEntitys(System.Collections.Generic.IEnumerable{FoolishServer.Data.DbCommition})">
            <summary>
            操作一堆数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.LoadAll``1">
            <summary>
            读取表中所有数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.Find``1(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            通过EntityKey，查询某一条数据，没有就返回空
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.GenerateModifySql(FoolishServer.Data.DbCommition,System.Text.StringBuilder)">
            <summary>
            执行修改操作
            </summary>
        </member>
        <member name="M:FoolishServer.Data.MySQLDatabase.Deserialize``1(FoolishServer.Data.ITableScheme,MySql.Data.MySqlClient.MySqlDataReader)">
            <summary>
            解析存储的数据
            </summary>
        </member>
        <member name="T:FoolishServer.Data.RedisDatabase">
            <summary>
            Redis 链接池
            </summary>
        </member>
        <member name="P:FoolishServer.Data.RedisDatabase.Converter">
            <summary>
            解析方案，默认Protobuff
            </summary>
        </member>
        <member name="P:FoolishServer.Data.RedisDatabase.Redis">
            <summary>
            Redis连接池，这是一个池子
            </summary>
        </member>
        <member name="P:FoolishServer.Data.RedisDatabase.Setting">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="P:FoolishServer.Data.RedisDatabase.Connected">
            <summary>
            是否还连接着
            </summary>
        </member>
        <member name="F:FoolishServer.Data.RedisDatabase.HeartbeatTime">
            <summary>
            心跳检测
            </summary>
        </member>
        <member name="P:FoolishServer.Data.RedisDatabase.RedisServer">
            <summary>
            Redis的连接服务器
            </summary>
        </member>
        <member name="P:FoolishServer.Data.RedisDatabase.Database">
            <summary>
            连接中的数据库
            </summary>
        </member>
        <member name="F:FoolishServer.Data.RedisDatabase.isExecuting">
            <summary>
            判断是否正在事务处理
            </summary>
        </member>
        <member name="P:FoolishServer.Data.RedisDatabase.Kind">
            <summary>
            什么类型的数据库
            </summary>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.#ctor(FoolishServer.Config.IRedisSetting)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.Connect">
            <summary>
            连接函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.CheckRedis">
            <summary>
            检查连接状态
            </summary>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.Reconnect">
            <summary>
            重新连接
            </summary>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.Ping(System.Object)">
            <summary>
            心跳检测
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.CommitModifiedEntitys(System.Collections.Generic.IEnumerable{FoolishServer.Data.DbCommition})">
            <summary>
            操作一堆数据
            </summary>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.LoadAll``1">
            <summary>
            读取表中所有
            </summary>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.Find``1(FoolishServer.Data.Entity.EntityKey)">
            <summary>
            通过EntityKey，查询某一条数据，没有就返回空
            </summary>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.ConvertToValue(FoolishServer.Data.EConvertType,FoolishServer.Data.Entity.MajorEntity)">
            <summary>
            数据解析
            </summary>
        </member>
        <member name="M:FoolishServer.Data.RedisDatabase.ConvertToEntity``1(FoolishServer.Data.EConvertType,StackExchange.Redis.RedisValue)">
            <summary>
            数据转换
            </summary>
        </member>
        <member name="T:FoolishServer.Data.TableFieldComparor">
            <summary>
            表的列表判断是否更改
            </summary>
        </member>
        <member name="T:FoolishServer.Data.TableFieldComparor.EOperation">
            <summary>
            需要执行的操作
            </summary>
        </member>
        <member name="F:FoolishServer.Data.TableFieldComparor.EOperation.UnModified">
            <summary>
            不需要操作
            </summary>
        </member>
        <member name="F:FoolishServer.Data.TableFieldComparor.EOperation.Modified">
            <summary>
            只需要修改字段属性
            </summary>
        </member>
        <member name="F:FoolishServer.Data.TableFieldComparor.EOperation.DeleteThenInsert">
            <summary>
            先删除后添加
            </summary>
        </member>
        <member name="F:FoolishServer.Data.TableFieldComparor.EOperation.ToInsert">
            <summary>
            添加新列
            </summary>
        </member>
        <member name="F:FoolishServer.Data.TableFieldComparor.EOperation.Deleted">
            <summary>
            删除列
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldComparor.FieldName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldComparor.Operation">
            <summary>
            需要做的操作
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldComparor.TableField">
            <summary>
            缓存中的结构
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldComparor.DbFieldInfo">
            <summary>
            数据库中的结构
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldComparor.OnlyIsKeyChanged">
            <summary>
            是不是只有主键判断进行了修改
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldComparor.OnlyIsIndexChanged">
            <summary>
            是不是只有索引进行了修改
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldComparor.IsError">
            <summary>
            判断是否成功
            </summary>
        </member>
        <member name="M:FoolishServer.Data.TableFieldComparor.#ctor(FoolishServer.Data.Entity.IEntityField,FoolishServer.Data.Entity.IEntityField)">
            <summary>
            判断两个结构是否需要进行操作
            </summary>
            <param name="tableField">缓存中的结构</param>
            <param name="dbFieldInfo">数据库中的结构</param>
        </member>
        <member name="M:FoolishServer.Data.TableFieldComparor.Compare(FoolishServer.Data.Entity.IEntityField,FoolishServer.Data.Entity.IEntityField,FoolishServer.Data.TableFieldComparor.EOperation@,System.Boolean@,System.Boolean@)">
            <summary>
            判断两个结构是否需要进行操作
            </summary>
        </member>
        <member name="T:FoolishServer.Data.TableFieldScheme">
            <summary>
            表中的列结构
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldScheme.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldScheme.Attribute">
            <summary>
            Attribute信息
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldScheme.Type">
            <summary>
            列类型
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldScheme.IsKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldScheme.Name">
            <summary>
            在数据库中列名
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldScheme.Nullable">
            <summary>
            是否可为空
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldScheme.IsIndex">
            <summary>
            是否建立索引，只在主表下有用
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldScheme.DefaultValue">
            <summary>
            默认补全值
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableFieldScheme.FieldType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="T:FoolishServer.Data.TableScheme">
            <summary>
            表结构
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.EntityTable">
            <summary>
            私有属性
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.Type">
            <summary>
            结构类型
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.FieldsByProperty">
            <summary>
            列信息，Key: PropertyName
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.FieldsByName">
            <summary>
            列信息，Key: Name
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.KeyFields">
            <summary>
            主键列
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.ConnectKey">
            <summary>
            映射的数据库链接名称
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.TableNameFormat">
            <summary>
            {0}为数据库名称，{1:MMdd}为之间名称
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.InCache">
            <summary>
            是否进入缓存，默认true，但是日志这些结构，需要设置为false
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.NeverExpired">
            <summary>
             是否从不过期,判断是否产生冷数据，默认false
            </summary>
        </member>
        <member name="P:FoolishServer.Data.TableScheme.StorageType">
            <summary>
            存储方案(位运算)
            <para>默认 StorageType.WriteToRedis | EStorageType.ReadFromRedis | EStorageType.WriteToDb | EStorageType.ReadFromDb</para>
            </summary>
        </member>
        <member name="F:FoolishServer.Data.TableScheme.PrivateTempTableName">
            <summary>
            缓存的临时表名
            </summary>
        </member>
        <member name="F:FoolishServer.Data.TableScheme.PrivateGlobalTableName">
            <summary>
            缓存全局表名
            </summary>
        </member>
        <member name="F:FoolishServer.Data.TableScheme.TableNameChanged">
            <summary>
            判断表名是否发生变化
            </summary>
        </member>
        <member name="F:FoolishServer.Data.TableScheme.SyncRoot">
            <summary>
            事务处理锁
            </summary>
        </member>
        <member name="M:FoolishServer.Data.TableScheme.TableNameChangedAndReset">
            <summary>
            判断表名是否发生变化，并且重置缓存名称
            </summary>
        </member>
        <member name="M:FoolishServer.Data.TableScheme.GetTableName">
            <summary>
            用于存数据库的表名
            </summary>
        </member>
        <member name="T:FoolishServer.Runtime.IRuntime">
            <summary>
            自定义运行时
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.IRuntime.OnStartup">
            <summary>
            启动，但未启动服务器时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.IRuntime.OnDatebaseInitialized">
            <summary>
            在数据库管理对象初始化完成时执行，
            并没有连接，也没有数据
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.IRuntime.ReadyToStartServers">
            <summary>
            准备开始启动服务器时调用，
            数据库已经连接，并且热数据已经载入
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.IRuntime.OnBegun">
            <summary>
            服务器启动后执行
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.IRuntime.OnShutdown">
            <summary>
            在关闭前执行
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.IRuntime.OnKilled">
            <summary>
            在退出时执行
            </summary>
        </member>
        <member name="T:FoolishServer.Runtime.CustomRuntime">
            <summary>
            自定义运行时
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.CustomRuntime.OnStartup">
            <summary>
            启动，但未启动服务器时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.CustomRuntime.OnDatebaseInitialized">
            <summary>
            在数据库管理对象初始化完成时执行，
            并没有连接，也没有数据
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.CustomRuntime.ReadyToStartServers">
            <summary>
            准备开始启动服务器时调用，
            数据库已经连接，并且热数据已经载入
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.CustomRuntime.OnBegun">
            <summary>
            服务器启动后执行
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.CustomRuntime.OnShutdown">
            <summary>
            在关闭前执行
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.CustomRuntime.OnKilled">
            <summary>
            在退出时执行
            </summary>
        </member>
        <member name="T:FoolishServer.Runtime.ILInjection">
            <summary>
            代码注入器，依赖Mono
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.ILInjection.InjectEntityChangeEvent">
            <summary>
            注入监听Model发生变化的代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Runtime.ILInjection.ProcessEntityType(Mono.Cecil.TypeDefinition,Mono.Cecil.TypeDefinition)">
            <summary>
            向Model层注入代码
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.ILInjection.InjectAopCode(Mono.Cecil.TypeDefinition,Mono.Cecil.PropertyDefinition)">
            <summary>
            注入修改监听代码
            </summary>
        </member>
        <member name="T:FoolishServer.Runtime.ILInjection.GlobalMethodTypes">
            <summary>
            全局需要用的引用
            </summary>
        </member>
        <member name="P:FoolishServer.Runtime.ILInjection.GlobalMethodTypes.BoolType">
            <summary>
            bool
            </summary>
        </member>
        <member name="P:FoolishServer.Runtime.ILInjection.GlobalMethodTypes.ObjectType">
            <summary>
            object
            </summary>
        </member>
        <member name="P:FoolishServer.Runtime.ILInjection.GlobalMethodTypes.SyncRootField">
            <summary>
            同步锁的对象
            </summary>
        </member>
        <member name="P:FoolishServer.Runtime.ILInjection.GlobalMethodTypes.NotifyMethod">
            <summary>
            通知函数引用
            </summary>
        </member>
        <member name="P:FoolishServer.Runtime.ILInjection.GlobalMethodTypes.MonitorEnter">
            <summary>
            Monitor锁
            </summary>
        </member>
        <member name="P:FoolishServer.Runtime.ILInjection.GlobalMethodTypes.MonitorExit">
            <summary>
            Monitor锁
            </summary>
        </member>
        <member name="P:FoolishServer.Runtime.ILInjection.GlobalMethodTypes.EqualsMethod">
            <summary>
            Object.Equals(A,B)
            </summary>
        </member>
        <member name="P:FoolishServer.Runtime.ILInjection.GlobalMethodTypes.MillisecondsTimeout">
            <summary>
            锁的Timeout
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.ILInjection.GlobalMethodTypes.#ctor(Mono.Cecil.ModuleDefinition,Mono.Cecil.FieldDefinition,Mono.Cecil.MethodDefinition)">
            <summary>
            赋值
            </summary>
        </member>
        <member name="F:FoolishServer.Runtime.ILInjection.MethodTypes">
            <summary>
            全局引用
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.ILInjection.GenerateSetMethod(Mono.Cecil.MethodDefinition,Mono.Cecil.FieldDefinition,System.String)">
            <summary>
            注入Set函数
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.ILInjection.GenerateGetMethod(Mono.Cecil.MethodDefinition,Mono.Cecil.FieldDefinition,System.String)">
            <summary>
            注入Get函数
            </summary>
        </member>
        <member name="T:FoolishServer.Runtime.RuntimeHost">
            <summary>
            运行时
            </summary>
        </member>
        <member name="P:FoolishServer.Runtime.RuntimeHost.IsRunning">
            <summary>
            是否正在运行
            </summary>
        </member>
        <member name="F:FoolishServer.Runtime.RuntimeHost.START_INFO">
            <summary>
            启动字符串
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.RuntimeHost.PrintStartInfo">
            <summary>
            输出启动信息
            </summary>
        </member>
        <member name="P:FoolishServer.Runtime.RuntimeHost.CustomRuntime">
            <summary>
            自定义运行时
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.RuntimeHost.Startup">
            <summary>
            启动函数
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.RuntimeHost.Shutdown">
            <summary>
            关闭操作
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.RuntimeHost.GetOSBit">
            <summary>
            系统框架
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Runtime.RuntimeHost.GetRunPlatform">
            <summary>
            运行平台
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Runtime.RuntimeHost.RegistConsoleCancelKeyPress">
            <summary>
            注册退出指令
            </summary>
        </member>
        <member name="M:FoolishServer.Runtime.RuntimeHost.OnCancelKeyPress(System.Object,System.ConsoleCancelEventArgs)">
            <summary>
            输入退出指令时执行
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FoolishServer.Runtime.RuntimeHost.Reboot">
            <summary>
            重启应用
            </summary>
        </member>
        <member name="T:FoolishServer.Struct.IEntity">
            <summary>
            Model基类
            </summary>
        </member>
        <member name="P:FoolishServer.Struct.IEntity.IsModified">
            <summary>
            是否已经发生变化
            </summary>
        </member>
        <member name="P:FoolishServer.Struct.IEntity.ModifiedTime">
            <summary>
            上次修改的时间
            </summary>
        </member>
        <member name="P:FoolishServer.Struct.IEntity.ModifiedType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="T:FoolishServer.Struct.OnPropertyModified`1">
            <summary>
            当属性发生变化时执行
            </summary>
            <param name="sender">被修改的对象</param>
            <param name="propertyName">属性名称</param>
            <param name="oldValue">原本的数据</param>
            <param name="value">现在的数据</param>
        </member>
        <member name="T:FoolishServer.Struct.Entity">
            <summary>
            Model基类
            </summary>
        </member>
        <member name="P:FoolishServer.Struct.Entity.State">
            <summary>
            当前实例的存储状态
            </summary>
        </member>
        <member name="F:FoolishServer.Struct.Entity.SyncRoot">
            <summary>
            锁
            </summary>
        </member>
        <member name="P:FoolishServer.Struct.Entity.IsModified">
            <summary>
            是否已经发生变化
            </summary>
        </member>
        <member name="F:FoolishServer.Struct.Entity.modifiedTime">
            <summary>
            上次修改的时间
            </summary>
        </member>
        <member name="P:FoolishServer.Struct.Entity.ModifiedTime">
            <summary>
            上次修改的时间
            Set: 只在初始化时起作用
            </summary>        
        </member>
        <member name="F:FoolishServer.Struct.Entity.modifiedType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="P:FoolishServer.Struct.Entity.ModifiedType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="M:FoolishServer.Struct.Entity.NotifyPropertyModified(System.String,System.Object,System.Object)">
            <summary>
            注入时调用
            </summary>
        </member>
        <member name="M:FoolishServer.Struct.Entity.OnNotifyPropertyModified(System.String,System.Object,System.Object)">
            <summary>
            属性调用的实现函数,外部需要锁
            </summary>
        </member>
        <member name="M:FoolishServer.Struct.Entity.NotifyModified(FoolishServer.Data.Entity.EModifyType,System.String)">
            <summary>
            通知实例已经发生变化
            </summary>
        </member>
        <member name="M:FoolishServer.Struct.Entity.NotifyModifiedType(FoolishServer.Data.Entity.EModifyType)">
            <summary>
            更新状态
            </summary>
        </member>
        <member name="M:FoolishServer.Struct.Entity.OnModificationCommitted">
            <summary>
            修改已经提交时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Struct.Entity.OnPulledFromDb">
            <summary>
            数据数据库中拉取下来
            </summary>
        </member>
        <member name="M:FoolishServer.Struct.Entity.ResetModifiedType">
            <summary>
            重置修改的状态
            </summary>
        </member>
        <member name="M:FoolishServer.Struct.Entity.GetModifiedTime">
            <summary>
            用于判断是否作为冷数据来卸载。默认使用内部的修改时间，如果需要用自用的修改时间，比如使用登录时间，覆盖这个函数。
            </summary>
            <returns></returns>
        </member>
        <member name="T:FoolishServer.Struct.PropertyEntity">
            <summary>
            用于属性的结构类
            </summary>
        </member>
        <member name="F:FoolishServer.Struct.PropertyEntity.parent">
            <summary>
            父实例
            </summary>
        </member>
        <member name="P:FoolishServer.Struct.PropertyEntity.Parent">
            <summary>
            父实例
            </summary>
        </member>
        <member name="F:FoolishServer.Struct.PropertyEntity.state">
            <summary>
            当前实例的存储状态
            </summary>
        </member>
        <member name="P:FoolishServer.Struct.PropertyEntity.State">
            <summary>
            当前实例的存储状态
            </summary>
        </member>
        <member name="F:FoolishServer.Struct.PropertyEntity.propertyNameInParent">
            <summary>
            当前实例在父实例中的属性名称
            </summary>
        </member>
        <member name="P:FoolishServer.Struct.PropertyEntity.PropertyNameInParent">
            <summary>
            当前实例在父实例中的属性名称
            </summary>
        </member>
        <member name="M:FoolishServer.Struct.PropertyEntity.SetParent(FoolishServer.Struct.Entity,System.String)">
            <summary>
            绑入父物体
            </summary>
            <param name="parent"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:FoolishServer.Struct.PropertyEntity.RemoveFromParent">
            <summary>
            从父物体中移除
            </summary>
        </member>
        <member name="M:FoolishServer.Struct.PropertyEntity.NotifyModified(FoolishServer.Data.Entity.EModifyType,System.String)">
            <summary>
            通知修改
            </summary>
            <param name="modifiedType"></param>
            <param name="propertyName"></param>
        </member>
        <member name="T:FoolishServer.Collections.EntityDictionary`2">
            <summary>
            Model层使用的数据字典
            </summary>
        </member>
        <member name="M:FoolishServer.Collections.EntityDictionary`2.OnModificationCommitted">
            <summary>
            修改已经提交时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Collections.EntityDictionary`2.OnPulledFromDb">
            <summary>
            数据数据库中拉取下来
            </summary>
        </member>
        <member name="T:FoolishServer.Collections.EntityList`1">
            <summary>
            Model属性使用的列表
            </summary>
        </member>
        <member name="M:FoolishServer.Collections.EntityList`1.OnModificationCommitted">
            <summary>
            修改已经提交时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Collections.EntityList`1.OnPulledFromDb">
            <summary>
            数据数据库中拉取下来
            </summary>
        </member>
        <member name="M:FoolishServer.Common.ConverterExtensions.GetString(System.Object)">
            <summary>
            自动判断空的ToString
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:FoolishServer.Common.JsonUtility">
            <summary>
            Json处理中心
            </summary>
        </member>
        <member name="M:FoolishServer.Common.JsonUtility.ToJson(System.Object)">
            <summary>
            转Json
            </summary>
        </member>
        <member name="M:FoolishServer.Common.JsonUtility.ToEntity``1(System.String)">
            <summary>
            转实例
            </summary>
        </member>
        <member name="M:FoolishServer.Common.JsonUtility.ToObject``1(System.String)">
            <summary>
            转对象
            </summary>
        </member>
        <member name="M:FoolishServer.Common.JsonUtility.ToObject(System.String,System.Type)">
            <summary>
            转对象
            </summary>
        </member>
        <member name="T:FoolishServer.Common.MonoReflectionExtensions">
            <summary>
            Mono反射的拓展
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MonoReflectionExtensions.IsChildOf(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
            判断是否是子类
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MonoReflectionExtensions.Is(Mono.Cecil.TypeReference,System.String)">
            <summary>
            判断是否是子类
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MonoReflectionExtensions.IsChildOf(Mono.Cecil.TypeReference,System.String)">
            <summary>
            判断是否是子类
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MonoReflectionExtensions.ContainsAttribute(Mono.Cecil.PropertyDefinition,System.String)">
            <summary>
            属性中是否包含Atrribute
            </summary>
        </member>
        <member name="T:FoolishServer.Common.MySqlDataReaderExtionsions">
            <summary>
            MySqlDataReader拓展防空
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetFieldValue``1(MySql.Data.MySqlClient.MySqlDataReader,System.String,``0)">
            <summary>
            泛型获取数据
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetString(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.String)">
            <summary>
            获取字符串
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetBoolean(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.Boolean)">
            <summary>
            获取bool
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetByte(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.Byte)">
            <summary>
            获取byte
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetInt16(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.Int16)">
            <summary>
            获取short
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetInt32(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.Int32)">
            <summary>
            获取int
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetInt64(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.Int64)">
            <summary>
            获取long
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetSByte(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.SByte)">
            <summary>
            获取sbyte
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetUInt16(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.UInt16)">
            <summary>
            获取ushort
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetUInt32(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.UInt32)">
            <summary>
            获取uint
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetUInt64(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.UInt64)">
            <summary>
            获取ulong
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetFloat(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.Single)">
            <summary>
            获取float
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetDouble(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.Double)">
            <summary>
            获取double
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetDateTime(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.DateTime)">
            <summary>
            获取DateTime
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetTimeSpan(MySql.Data.MySqlClient.MySqlDataReader,System.String,System.TimeSpan)">
            <summary>
            获取TimeSpan
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetString(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.String)">
            <summary>
            获取字符串
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetBoolean(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.Boolean)">
            <summary>
            获取bool
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetByte(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.Byte)">
            <summary>
            获取byte
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetInt16(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.Int16)">
            <summary>
            获取short
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetInt32(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.Int32)">
            <summary>
            获取int
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetInt64(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.Int64)">
            <summary>
            获取long
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetSByte(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.SByte)">
            <summary>
            获取sbyte
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetUInt16(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.UInt16)">
            <summary>
            获取ushort
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetUInt32(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.UInt32)">
            <summary>
            获取uint
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetUInt64(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.UInt64)">
            <summary>
            获取ulong
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetFloat(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.Single)">
            <summary>
            获取float
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetDouble(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.Double)">
            <summary>
            获取double
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetDateTime(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.DateTime)">
            <summary>
            获取DateTime
            </summary>
        </member>
        <member name="M:FoolishServer.Common.MySqlDataReaderExtionsions.GetTimeSpan(MySql.Data.MySqlClient.MySqlDataReader,System.Int32,System.TimeSpan)">
            <summary>
            获取TimeSpan
            </summary>
        </member>
        <member name="T:FoolishServer.Common.StringConverter">
            <summary>
            字符串操作
            </summary>
        </member>
        <member name="M:FoolishServer.Common.StringConverter.ToLowerWithDownLine(System.String)">
            <summary>
            变小写，并且大写字母前加下划线
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:FoolishServer.Common.TableFieldConverter">
            <summary>
            数据表类型转换
            </summary>
        </member>
        <member name="M:FoolishServer.Common.TableFieldConverter.ConvertFromType(System.Type)">
            <summary>
            转换成枚举
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Common.TableFieldConverter.GetString(FoolishServer.Data.Entity.IEntityField)">
            <summary>
            打出日志
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:FoolishServer.Log.Categories">
            <summary>
            类别名称
            </summary>
        </member>
    </members>
</doc>
