<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FoolishServer.Framework</name>
    </assembly>
    <members>
        <member name="T:FoolishServer.Action.IServerAction">
            <summary>
            服务器Action
            </summary>
        </member>
        <member name="P:FoolishServer.Action.IServerAction.Session">
            <summary>
            会话窗口
            </summary>
        </member>
        <member name="P:FoolishServer.Action.IServerAction.UserId">
            <summary>
            玩家Id
            </summary>
        </member>
        <member name="T:FoolishServer.Action.ServerAction">
            <summary>
            服务器Action
            </summary>
        </member>
        <member name="P:FoolishServer.Action.ServerAction.Session">
            <summary>
            对应的会话窗口
            </summary>
        </member>
        <member name="P:FoolishServer.Action.ServerAction.UserId">
            <summary>
            玩家Id
            </summary>
        </member>
        <member name="M:FoolishServer.Action.ServerAction.Check">
            <summary>
            判断是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.Name">
            <summary>
            服务器标识
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.ActionClassFullName">
            <summary>
            消息处理的完整类名，用{0}嵌入id
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.MainClass">
            <summary>
            执行类
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.Backlog">
            <summary>
            TCP全连接队列长度
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.MaxConnections">
            <summary>
            最大并发数量
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.MaxAcceptCapacity">
            <summary>
            默认连接对象池容量
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.MaxIOCapacity">
            <summary>
            默认消息处理连接池容量大小
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.BufferSize">
            <summary>
            数据通讯缓存字节大小
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.Offset">
            <summary>
            通讯内容整体偏移
            </summary>
        </member>
        <member name="P:FoolishServer.Config.IHostSetting.UseGZip">
            <summary>
            是否使用压缩
            </summary>
        </member>
        <member name="M:FoolishServer.Config.IHostSetting.GetCategory">
            <summary>
            获取类别显示
            </summary>
        </member>
        <member name="T:FoolishServer.Net.IRemoteSocket">
            <summary>
            自定义套接字
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IRemoteSocket.Server">
            <summary>
            所属服务器
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IRemoteSocket.HashCode">
            <summary>
            唯一id
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IRemoteSocket.AccessTime">
            <summary>
            获取时间
            </summary>
        </member>
        <member name="M:FoolishServer.Net.IRemoteSocket.ResetHashset(System.Guid)">
            <summary>
            重置唯一id
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:FoolishServer.Net.IServer">
            <summary>
            服务器对象接口定义
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IServer.IsRunning">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IServer.Name">
            <summary>
            标识名称
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IServer.Port">
            <summary>
            开放的端口
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IServer.Setting">
            <summary>
            配置文件
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IServer.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IServer.ServerSocket">
            <summary>
            监听套接字
            </summary>
        </member>
        <member name="M:FoolishServer.Net.IServer.Start(FoolishServer.Config.IHostSetting)">
            <summary>
            启动结构
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Net.IServer.Shutdown">
            <summary>
            关闭
            </summary>
            <returns></returns>
        </member>
        <member name="T:FoolishServer.Net.IServerMessageProcessor">
            <summary>
            消息处理类
            </summary>
        </member>
        <member name="M:FoolishServer.Net.IServerMessageProcessor.MessageReceived(FoolishGames.Net.IMessageEventArgs{FoolishServer.Net.IRemoteSocket})">
            <summary>
            接收到数据包事件
            </summary>
        </member>
        <member name="M:FoolishServer.Net.IServerMessageProcessor.Ping(FoolishGames.Net.IMessageEventArgs{FoolishServer.Net.IRemoteSocket})">
            <summary>
            心跳探索事件
            </summary>
        </member>
        <member name="M:FoolishServer.Net.IServerMessageProcessor.Pong(FoolishGames.Net.IMessageEventArgs{FoolishServer.Net.IRemoteSocket})">
            <summary>
            心跳回应事件
            </summary>
        </member>
        <member name="T:FoolishServer.Net.IServerSocket">
            <summary>
            服务器套接字接口定义
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IServerSocket.ServerName">
            <summary>
            对应Host的名称
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IServerSocket.Port">
            <summary>
            绑定的端口
            </summary>
        </member>
        <member name="P:FoolishServer.Net.IServerSocket.Setting">
            <summary>
            获取配置信息
            </summary>
        </member>
        <member name="E:FoolishServer.Net.IServerSocket.OnConnected">
            <summary>
            连接事件
            </summary>
        </member>
        <member name="E:FoolishServer.Net.IServerSocket.OnHandshaked">
            <summary>
            握手事件
            </summary>
        </member>
        <member name="E:FoolishServer.Net.IServerSocket.OnDisconnected">
            <summary>
            断开连接事件
            </summary>
        </member>
        <member name="E:FoolishServer.Net.IServerSocket.OnMessageReceived">
            <summary>
            接收到数据包事件
            </summary>
        </member>
        <member name="E:FoolishServer.Net.IServerSocket.OnPing">
            <summary>
            心跳探索事件
            </summary>
        </member>
        <member name="E:FoolishServer.Net.IServerSocket.OnPong">
            <summary>
            心跳回应事件
            </summary>
        </member>
        <member name="M:FoolishServer.Net.IServerSocket.Start(FoolishServer.Config.IHostSetting)">
            <summary>
            启动函数
            </summary>
        </member>
        <member name="M:FoolishServer.Net.IServerSocket.OnRemoteSocketClosed(FoolishServer.Net.IRemoteSocket,FoolishGames.Net.EOpCode)">
            <summary>
            当远端连接关闭时，执行一些回收代码
            </summary>
        </member>
        <member name="T:FoolishServer.Net.RemoteSocket">
            <summary>
            套接字嵌套层
            </summary>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.SetIsRunning(System.Boolean)">
            <summary>
            是否在运行
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.Server">
            <summary>
            所属服务器
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.HashCode">
            <summary>
            唯一id
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.AccessTime">
            <summary>
            获取时间
            </summary>
        </member>
        <member name="F:FoolishServer.Net.RemoteSocket.address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.MessageOffset">
            <summary>
            消息偏移值
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.Compression">
            <summary>
            压缩工具
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.CryptoProvider">
            <summary>
            加密工具
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.Sender">
            <summary>
            发送的管理类
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.Receiver">
            <summary>
            接收管理类
            </summary>
        </member>
        <member name="P:FoolishServer.Net.RemoteSocket.MessageNumber">
            <summary>
            消息Id
            </summary>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.#ctor(FoolishServer.Net.IServerSocket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.Close(FoolishGames.Net.EOpCode)">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.ResetHashset(System.Guid)">
            <summary>
            重置唯一id
            </summary>
            <param name="key">新的id</param>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.BeginSend">
            <summary>
            开始执行发送
            </summary>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.Send(FoolishGames.IO.IMessageWriter)">
            <summary>
            数据发送<c>异步</c>
            </summary>
            <param name="message">大宋的消息</param>
            <returns>判断有没有发送出去</returns>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.SendImmediately(FoolishGames.IO.IMessageWriter)">
            <summary>
            立即发送消息，会打乱消息顺序。只有类似心跳包这种及时的需要用到。一般使用Send就满足使用
            </summary>
            <param name="message">发送的消息</param>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.SendBytes(System.Byte[])">
            <summary>
            内部函数，直接传bytes，会影响数据解析
            </summary>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.SendBytesImmediately(System.Byte[])">
            <summary>
            内部函数，直接传bytes，会影响数据解析，以及解析顺序
            </summary>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.BeginReceive">
            <summary>
            等待消息接收
            </summary>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.MessageSolved(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            当消息处理完执行
            <para>https://learn.microsoft.com/zh-cn/dotnet/api/system.net.sockets.socketasynceventargs</para>
            </summary>
        </member>
        <member name="M:FoolishServer.Net.RemoteSocket.CanRemoveFromWaitingList">
            <summary>
            是否可以从等待接收的列表中移除
            </summary>
        </member>
        <member name="T:FoolishServer.Net.ConnectionEventHandler">
            <summary>
            连接消息代理
            </summary>
        </member>
        <member name="T:FoolishServer.Net.MessageEventHandler">
            <summary>
            收发消息处理
            </summary>
        </member>
        <member name="T:FoolishServer.Net.ServerSocket">
            <summary>
            服务器套接字管理
            </summary>
        </member>
        <member name="E:FoolishServer.Net.ServerSocket.OnConnected">
            <summary>
            连接事件
            </summary>
        </member>
        <member name="E:FoolishServer.Net.ServerSocket.OnHandshaked">
            <summary>
            握手事件
            </summary>
        </member>
        <member name="E:FoolishServer.Net.ServerSocket.OnDisconnected">
            <summary>
            断开连接事件
            </summary>
        </member>
        <member name="E:FoolishServer.Net.ServerSocket.OnMessageReceived">
            <summary>
            接收到数据包事件
            </summary>
        </member>
        <member name="E:FoolishServer.Net.ServerSocket.OnPing">
            <summary>
            心跳探索事件
            </summary>
        </member>
        <member name="E:FoolishServer.Net.ServerSocket.OnPong">
            <summary>
            心跳回应事件
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.socket">
            <summary>
            内部关键原生Socket
            </summary>
        </member>
        <member name="P:FoolishServer.Net.ServerSocket.Socket">
            <summary>
            内部关键原生Socket
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.address">
            <summary>
            封装的地址
            </summary>
        </member>
        <member name="P:FoolishServer.Net.ServerSocket.Address">
            <summary>
            封装的地址
            </summary>
        </member>
        <member name="P:FoolishServer.Net.ServerSocket.Port">
            <summary>
            绑定的端口
            </summary>
        </member>
        <member name="P:FoolishServer.Net.ServerSocket.ServerName">
            <summary>
            对应Host的名称
            </summary>
        </member>
        <member name="P:FoolishServer.Net.ServerSocket.Setting">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.messageOffset">
            <summary>
            消息偏移值
            </summary>
        </member>
        <member name="P:FoolishServer.Net.ServerSocket.MessageOffset">
            <summary>
            消息偏移值
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.SetMessageOffset(System.Int32)">
            <summary>
            消息偏移值
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.compression">
            <summary>
            消息偏移值
            </summary>
        </member>
        <member name="P:FoolishServer.Net.ServerSocket.Compression">
            <summary>
            压缩工具
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.SetCompression(FoolishGames.IO.ICompression)">
            <summary>
            压缩工具
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.cryptoProvider">
            <summary>
            消息偏移值
            </summary>
        </member>
        <member name="P:FoolishServer.Net.ServerSocket.CryptoProvider">
            <summary>
            加密工具
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.SetCryptoProvide(FoolishGames.Security.ICryptoProvider)">
            <summary>
            加密工具
            </summary>
        </member>
        <member name="P:FoolishServer.Net.ServerSocket.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.summary">
            <summary>
            状态类
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.summaryTask">
            <summary>
            输出统计的线程
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.maxConnectionsEnforcer">
            <summary>
            并发管理锁
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.acceptEventArgsPool">
            <summary>
            接受连接并发对象池
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.ioEventArgsPool">
            <summary>
            回复并发对象池
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.Sockets">
            <summary>
            等待消息处理的缓存列表，主要用于单线程处理
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.AllEventArgsPool">
            <summary>
            生成的所有套接字管理对象都缓存在这里
            </summary>
        </member>
        <member name="P:FoolishServer.Net.ServerSocket.BytePool">
            <summary>
            字节流池
            </summary>
        </member>
        <member name="F:FoolishServer.Net.ServerSocket.WaitingSocketTimer">
            <summary>
            待处理的Socket的等待线程
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.Start(FoolishServer.Config.IHostSetting)">
            <summary>
            入口函数
            </summary>
            <param name="setting"></param>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.PostAccept">
            <summary>
            开始接受连接
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.ProcessAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            处理接收到的连接
            </summary>
            <param name="acceptEventArgs"></param>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.AcceptCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            收到连接时需要做的事情
            </summary>
            <param name="sender"></param>
            <param name="acceptEventArgs"></param>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.ReleaseAccept(System.Net.Sockets.SocketAsyncEventArgs,System.Boolean)">
            <summary>
            释放并发锁
            </summary>
            <param name="acceptEventArgs"></param>
            <param name="isRelease"></param>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.IOCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            消息接收处理
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.ProcessWaiting(System.Object)">
            <summary>
            待接收的套接字处理线程
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.ReleaseIOEventArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            释放消息事件
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.HandleBadAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            异常连接处理
            </summary>
            <param name="acceptEventArgs"></param>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.ResetSocketAsyncEventArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            重置Socket连接对象
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.OnRemoteSocketClosed(FoolishServer.Net.IRemoteSocket,FoolishGames.Net.EOpCode)">
            <summary>
            当远端连接关闭时，执行一些回收代码
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.WriteSummary(System.Object)">
            <summary>
            输出状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.MakeIOEventArgs">
            <summary>
            设置缓冲区大小
            </summary>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.CreateAcceptEventArgs">
            <summary>
            创建待建立连接的套接字缓存类
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.Net.ServerSocket.Close">
            <summary>
            关闭操作
            </summary>
        </member>
        <member name="T:FoolishServer.Net.SocketServer">
            <summary>
            套接字服务器
            </summary>
        </member>
        <member name="P:FoolishServer.Net.SocketServer.IsRunning">
            <summary>
            是否启动
            </summary>
        </member>
        <member name="P:FoolishServer.Net.SocketServer.Name">
            <summary>
            标识名称
            </summary>
        </member>
        <member name="P:FoolishServer.Net.SocketServer.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:FoolishServer.Net.SocketServer.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:FoolishServer.Net.SocketServer.ServerSocket">
            <summary>
            监听套接字
            </summary>
        </member>
        <member name="P:FoolishServer.Net.SocketServer.Compression">
            <summary>
            压缩工具
            </summary>
        </member>
        <member name="P:FoolishServer.Net.SocketServer.CryptoProvider">
            <summary>
            加密工具
            </summary>
        </member>
        <member name="P:FoolishServer.Net.SocketServer.ActionProvider">
            <summary>
            生成Action
            </summary>
        </member>
        <member name="P:FoolishServer.Net.SocketServer.MessageContractor">
            <summary>
            消息处理的中转站
            </summary>
        </member>
        <member name="P:FoolishServer.Net.SocketServer.Setting">
            <summary>
            配置文件
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.Start(FoolishServer.Config.IHostSetting)">
            <summary>
            启动结构
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.OnStart">
            <summary>
            在服务器启动时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.ProcessMessage(FoolishServer.Net.IServerSocket,FoolishGames.Net.IMessageEventArgs{FoolishServer.Net.IRemoteSocket})">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.OnReceiveMessage(FoolishServer.RPC.ISession,FoolishGames.IO.IMessageReader)">
            <summary>
            开始接收数据，第一部处理
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.ProcessMessage(FoolishServer.RPC.ISession,FoolishGames.IO.IMessageReader)">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.OnSocketConnected(FoolishServer.Net.IServerSocket,FoolishServer.Net.IRemoteSocket)">
            <summary>
            Socket连接时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.OnSessionConnected(FoolishServer.RPC.ISession)">
            <summary>
            在客户端连接时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.OnSessionDisonnected(FoolishServer.RPC.ISession)">
            <summary>
            在客户端断开时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.OnSessionHeartbeat(FoolishServer.RPC.ISession)">
            <summary>
            收到客户端的心跳包时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.OnSessionHeartbeatExpired(FoolishServer.RPC.ISession)">
            <summary>
            在客户端心跳包过期时执行
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.OnClose">
            <summary>
            在关闭前处理
            </summary>
        </member>
        <member name="M:FoolishServer.Net.SocketServer.Shutdown">
            <summary>
            退出
            </summary>
        </member>
        <member name="F:FoolishServer.Net.SummaryStatus.TotalConnectCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:FoolishServer.Net.SummaryStatus.CurrentConnectCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:FoolishServer.Net.SummaryStatus.RejectedConnectCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:FoolishServer.Net.SummaryStatus.CloseConnectCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:FoolishServer.Net.TcpServer">
            <summary>
            Tcp服务器
            </summary>
        </member>
        <member name="T:FoolishServer.Net.UdpServer">
            <summary>
            Udp服务器
            </summary>
        </member>
        <member name="T:FoolishServer.Proxy.IServerActionDispatcher">
            <summary>
            Action工厂
            </summary>
        </member>
        <member name="M:FoolishServer.Proxy.IServerActionDispatcher.Provide(System.Int32)">
            <summary>
            获取Action
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="T:FoolishServer.Proxy.MessageWorker">
            <summary>
            消息处理的代理
            </summary>
        </member>
        <member name="P:FoolishServer.Proxy.MessageWorker.Session">
            <summary>
            会话窗口
            </summary>
        </member>
        <member name="P:FoolishServer.Proxy.MessageWorker.Message">
            <summary>
            消息处理窗口
            </summary>
        </member>
        <member name="P:FoolishServer.Proxy.MessageWorker.Server">
            <summary>
            服务器
            </summary>
        </member>
        <member name="M:FoolishServer.Proxy.MessageWorker.Work">
            <summary>
            需要处理的工作
            </summary>
        </member>
        <member name="T:FoolishServer.Proxy.ServerActionDispatcher">
            <summary>
            默认反射创建Action
            </summary>
        </member>
        <member name="P:FoolishServer.Proxy.ServerActionDispatcher.ActionNameFormat">
            <summary>
            Action名称的格式
            </summary>
        </member>
        <member name="M:FoolishServer.Proxy.ServerActionDispatcher.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="actionNameFormat">Action名称的格式</param>
        </member>
        <member name="M:FoolishServer.Proxy.ServerActionDispatcher.Provide(System.Int32)">
            <summary>
            生成Action协议
            </summary>
        </member>
        <member name="T:FoolishServer.RPC.OnSessionHeartbeatExpired">
            <summary>
            Session心跳到期处理
            </summary>
        </member>
        <member name="T:FoolishServer.RPC.ISession">
            <summary>
            会话窗口
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.KeyCode">
            <summary>
            标识符
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.SessionId">
            <summary>
            会话窗口id
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.UserId">
            <summary>
            绑定的UserId
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.RemoteAddress">
            <summary>
            远端地址
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.ServerName">
            <summary>
            服务器名称
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.Socket">
            <summary>
            自身的Socket
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.Blocked">
            <summary>
            是否阻断当前Session
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.ActiveTime">
            <summary>
            最近活跃时间
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.Expired">
            <summary>
            是否过期
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.HeartbeatExpired">
            <summary>
            心跳过期
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.Closed">
            <summary>
            是否已经关闭
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.ISession.Connected">
            <summary>
            是否还连接着
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.ISession.Close">
            <summary>
            关闭会话窗口
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.ISession.Send(FoolishGames.IO.IMessageWriter)">
            <summary>
            异步发送一条数据
            </summary>
        </member>
        <member name="T:FoolishServer.RPC.GameSession">
            <summary>
            会话窗口
            </summary>
            <summary>
            会话窗口
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.KeyCode">
            <summary>
            标识符
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.SessionId">
            <summary>
            会话窗口id
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.UserId">
            <summary>
            绑定的UserId
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.RemoteAddress">
            <summary>
            远端地址
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.Socket">
            <summary>
            自身的Socket
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.ServerName">
            <summary>
            服务器名称
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.Server">
            <summary>
            所属服务器
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.IsValid">
            <summary>
            当前的Session是否还有效
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.Blocked">
            <summary>
            是否阻断当前Session
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.ActiveTime">
            <summary>
            最近活跃时间
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.Expired">
            <summary>
            是否过期
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.HeartbeatExpired">
            <summary>
            心跳过期
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.Closed">
            <summary>
            是否已经关闭
            </summary>
        </member>
        <member name="P:FoolishServer.RPC.GameSession.Connected">
            <summary>
            是否还连接着
            </summary>
        </member>
        <member name="E:FoolishServer.RPC.GameSession.OnHeartbeatExpired">
            <summary>
            心跳到期
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.GameSession.#ctor(System.Guid,FoolishServer.Net.IRemoteSocket,FoolishServer.Net.IServerSocket)">
            <summary>
            内部构造函数
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.GameSession.GenerateSessionId">
            <summary>
            生成会话窗口名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.RPC.GameSession.HeartbeatTimeout">
            <summary>
            心跳到期
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.GameSession.Refresh">
            <summary>
            刷新信息
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.GameSession.Close">
            <summary>
            关闭Session
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.GameSession.Send(FoolishGames.IO.IMessageWriter)">
            <summary>
            异步发送一条数据
            </summary>
        </member>
        <member name="F:FoolishServer.RPC.GameSession.sessions">
            <summary>
            会话窗口池
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.GameSession.#cctor">
            <summary>
            静态初始化
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.GameSession.CreateNew(System.Guid,FoolishServer.Net.IRemoteSocket,FoolishServer.Net.IServerSocket)">
            <summary>
            创建会话窗口
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.GameSession.Get(System.Nullable{System.Guid})">
            <summary>
            通过Guid获取Session
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.GameSession.SendAsync(FoolishGames.IO.IMessageWriter,System.Collections.Generic.IEnumerable{FoolishServer.RPC.GameSession})">
            <summary>
            异步给一堆客户端发消息
            </summary>
            <param name="message"></param>
            <param name="sessions"></param>
        </member>
        <member name="T:FoolishServer.RPC.ServerManager">
            <summary>
            服务器管理类
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.ServerManager.Start(FoolishServer.Config.IHostSetting)">
            <summary>
            开启一个服务器
            </summary>
            <param name="hostType"></param>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.RPC.ServerManager.Shutdown(System.String)">
            <summary>
            关闭指定名称的服务器
            </summary>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.RPC.ServerManager.Shutdown(FoolishServer.Net.IServer)">
            <summary>
            关闭一个服务器
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.RPC.ServerManager.Shutdown">
            <summary>
            关闭所有服务器
            </summary>
        </member>
        <member name="M:FoolishServer.RPC.ServerManager.CreateServer(FoolishServer.Config.IHostSetting)">
            <summary>
            创建Host
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.RPC.ServerManager.CheckSetting(FoolishServer.Config.IHostSetting)">
            <summary>
            判断这个配置是否可用
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:FoolishServer.RPC.SessionExtensions.IsValid(FoolishServer.RPC.ISession)">
            <summary>
            判断有效性
            </summary>
        </member>
        <member name="T:FoolishServer.Log.Categories">
            <summary>
            类别名称
            </summary>
        </member>
    </members>
</doc>
